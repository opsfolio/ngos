import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { 
  Search, 
  Play, 
  Pause, 
  RotateCcw,
  AlertTriangle,
  CheckCircle,
  Clock,
  Settings,
  Download,
  Filter,
  ArrowLeft,
  Shield,
  Target,
  Activity
} from 'lucide-react';

const VulnerabilityScanning = () => {
  const navigate = useNavigate();
  const [scanStatus, setScanStatus] = useState('idle'); // idle, running, completed

  const scanTemplates = [
    { name: 'Full Network Scan', description: 'Comprehensive vulnerability assessment', duration: '2-4 hours' },
    { name: 'Web Application Scan', description: 'OWASP Top 10 and web-specific vulnerabilities', duration: '1-2 hours' },
    { name: 'Quick Discovery Scan', description: 'Fast asset discovery and basic checks', duration: '15-30 minutes' },
    { name: 'Compliance Scan', description: 'Regulatory compliance focused assessment', duration: '1-3 hours' }
  ];

  const recentScans = [
    {
      id: 1,
      name: 'Production Network Scan',
      target: '192.168.1.0/24',
      status: 'Completed',
      vulnerabilities: { critical: 2, high: 8, medium: 15, low: 42 },
      date: '2024-01-15',
      duration: '3h 24m'
    },
    {
      id: 2,
      name: 'Web Application Assessment',
      target: 'https://app.company.com',
      status: 'Running',
      progress: 67,
      date: '2024-01-15',
      duration: '1h 12m'
    },
    {
      id: 3,
      name: 'DMZ Infrastructure Scan',
      target: '10.0.1.0/24',
      status: 'Scheduled',
      date: '2024-01-16',
      scheduledTime: '02:00 AM'
    }
  ];

  const vulnerabilityStats = [
    { severity: 'Critical', count: 5, color: 'destructive' },
    { severity: 'High', count: 23, color: 'destructive' },
    { severity: 'Medium', count: 67, color: 'secondary' },
    { severity: 'Low', count: 142, color: 'outline' }
  ];

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'running': return <Activity className="h-4 w-4 text-blue-600 animate-pulse" />;
      case 'scheduled': return <Clock className="h-4 w-4 text-yellow-600" />;
      default: return <AlertTriangle className="h-4 w-4 text-gray-600" />;
    }
  };

  const startScan = () => {
    setScanStatus('running');
    // Simulate scan completion after 3 seconds
    setTimeout(() => setScanStatus('completed'), 3000);
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => navigate('/threats')}
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Threats
            </Button>
            <div>
              <h1 className="text-3xl font-bold text-foreground">Vulnerability Scanning</h1>
              <p className="text-muted-foreground mt-1">
                Automated vulnerability assessment and security testing
              </p>
            </div>
          </div>
          <div className="flex gap-2">
            <Button variant="outline">
              <Settings className="h-4 w-4 mr-2" />
              Settings
            </Button>
            <Button variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Export
            </Button>
          </div>
        </div>

        <Tabs defaultValue="scan" className="space-y-6">
          <TabsList className="grid w-full lg:w-auto grid-cols-1 lg:grid-cols-4">
            <TabsTrigger value="scan">New Scan</TabsTrigger>
            <TabsTrigger value="results">Scan Results</TabsTrigger>
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="history">Scan History</TabsTrigger>
          </TabsList>

          <TabsContent value="scan" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Scan Configuration */}
              <div className="lg:col-span-2">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5" />
                      Configure Vulnerability Scan
                    </CardTitle>
                    <CardDescription>
                      Set up a new vulnerability assessment scan
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="scanName">Scan Name</Label>
                        <Input id="scanName" placeholder="Enter scan name" />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="scanTemplate">Scan Template</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select template" />
                          </SelectTrigger>
                          <SelectContent>
                            {scanTemplates.map((template) => (
                              <SelectItem key={template.name} value={template.name.toLowerCase().replace(/\s+/g, '-')}>
                                {template.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="targets">Scan Targets</Label>
                      <Input 
                        id="targets" 
                        placeholder="IP addresses, ranges, or hostnames (e.g., 192.168.1.1, 10.0.0.0/24)" 
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="scanType">Scan Type</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select scan type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="internal">Internal Network</SelectItem>
                            <SelectItem value="external">External/Internet Facing</SelectItem>
                            <SelectItem value="web-app">Web Application</SelectItem>
                            <SelectItem value="database">Database Assessment</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="priority">Priority</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select priority" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="low">Low</SelectItem>
                            <SelectItem value="medium">Medium</SelectItem>
                            <SelectItem value="high">High</SelectItem>
                            <SelectItem value="critical">Critical</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div className="flex gap-2 pt-4">
                      <Button onClick={startScan} disabled={scanStatus === 'running'}>
                        {scanStatus === 'running' ? (
                          <>
                            <Pause className="h-4 w-4 mr-2" />
                            Scanning...
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Start Scan
                          </>
                        )}
                      </Button>
                      <Button variant="outline">
                        <Clock className="h-4 w-4 mr-2" />
                        Schedule
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Scan Templates */}
              <div>
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Scan Templates</CardTitle>
                    <CardDescription>Pre-configured scan profiles</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {scanTemplates.map((template) => (
                        <div key={template.name} className="p-3 border rounded-lg cursor-pointer hover:bg-muted/50 transition-colors">
                          <h4 className="font-medium text-sm">{template.name}</h4>
                          <p className="text-xs text-muted-foreground mt-1">{template.description}</p>
                          <p className="text-xs text-primary mt-1">Duration: {template.duration}</p>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="results" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Search className="h-5 w-5" />
                  Recent Scan Results
                </CardTitle>
                <CardDescription>
                  Latest vulnerability scan results and findings
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {recentScans.map((scan) => (
                    <div key={scan.id} className="p-4 border rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-3">
                          {getStatusIcon(scan.status)}
                          <div>
                            <h4 className="font-medium">{scan.name}</h4>
                            <p className="text-sm text-muted-foreground">{scan.target}</p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant={scan.status === 'Completed' ? 'default' : scan.status === 'Running' ? 'secondary' : 'outline'}>
                            {scan.status}
                          </Badge>
                          <Button variant="outline" size="sm">
                            View Details
                          </Button>
                        </div>
                      </div>
                      
                      {scan.status === 'Running' && scan.progress && (
                        <div className="mt-3">
                          <div className="flex justify-between text-sm mb-1">
                            <span>Progress</span>
                            <span>{scan.progress}%</span>
                          </div>
                          <Progress value={scan.progress} className="h-2" />
                        </div>
                      )}
                      
                      {scan.vulnerabilities && (
                        <div className="flex gap-2 mt-3">
                          <Badge variant="destructive">Critical: {scan.vulnerabilities.critical}</Badge>
                          <Badge variant="destructive">High: {scan.vulnerabilities.high}</Badge>
                          <Badge variant="secondary">Medium: {scan.vulnerabilities.medium}</Badge>
                          <Badge variant="outline">Low: {scan.vulnerabilities.low}</Badge>
                        </div>
                      )}
                      
                      <div className="flex justify-between text-sm text-muted-foreground mt-2">
                        <span>{scan.date}</span>
                        <span>{scan.duration || scan.scheduledTime}</span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="vulnerabilities" className="space-y-6">
            {/* Vulnerability Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              {vulnerabilityStats.map((stat) => (
                <Card key={stat.severity}>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium text-muted-foreground">
                      {stat.severity} Vulnerabilities
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <span className="text-3xl font-bold">{stat.count}</span>
                      <Badge variant={stat.color as any}>{stat.severity}</Badge>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5" />
                      Vulnerability Details
                    </CardTitle>
                    <CardDescription>
                      Detailed vulnerability findings and remediation guidance
                    </CardDescription>
                  </div>
                  <Button variant="outline">
                    <Filter className="h-4 w-4 mr-2" />
                    Filter
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <AlertTriangle className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">Vulnerability Database</h3>
                  <p className="text-muted-foreground mb-4">
                    Detailed vulnerability findings will be displayed here after scanning
                  </p>
                  <Button onClick={() => navigate('/threats')}>
                    Start Your First Scan
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="history" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <RotateCcw className="h-5 w-5" />
                  Scan History
                </CardTitle>
                <CardDescription>
                  Historical vulnerability scan data and trends
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <Clock className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium mb-2">Scan History & Analytics</h3>
                  <p className="text-muted-foreground mb-4">
                    Historical scan data and vulnerability trends analysis
                  </p>
                  <Button variant="outline">
                    Configure Reporting
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default VulnerabilityScanning;